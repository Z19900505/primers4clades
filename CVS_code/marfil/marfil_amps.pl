#!/usr/bin/perl -w
# Bruno Contreras-Moreira, Pablo Vinuesa, ...
# 2005-8 UNAM/Mexico, EEAD/CSIC

use strict;
use Getopt::Std;
use FindBin '$Bin';
use lib "$Bin";
use lib "$Bin/bioperl-1.5.2_102/";
use phyTools;
set_phyTools_env();

my $progname = "marfil_amps.pl";
my $REMOVETMPFILES = 1;
my @files2remove;

######################################################

my(%opts,$DNAfile,$skip_ModelTest,$label_tree);

getopts('hln:m:', \%opts);

if(($opts{'h'})||(scalar(keys(%opts))==0))
{
        print "usage: $progname [options]\n";
        print "-h \t this message\n";
        print "-n \t input file with nucleotide sequences .fna\n";
        print "-m \t skip ModelTest, run model provided by user (optional,[GTRG|HKYG|TrNG|...])\n";
	print "-l \t label tree branches with FASTA headers     (optional)\n";
        exit;
}

if(defined($opts{'n'})){ $DNAfile = $opts{'n'}; }
else{ die "# $progname : need a valid nucleotide FNA file\n" }
if(defined($opts{'m'})){ $skip_ModelTest = $opts{'m'} }
else{ $skip_ModelTest = '' }
if(defined($opts{'l'})){ $label_tree = 1 }
else{ $label_tree =0 }

print "# $progname : -n $DNAfile -m $skip_ModelTest -l $label_tree\n";

######################################################
 
# 1) convert DNA alignment to phylip and nexus formats
my $DNA_phylip_file = convert_FAS2PHY($DNAfile,$REMOVETMPFILES);
if($DNA_phylip_file eq $ERROR)
{
	die "# $progname : sorry, FAS2PHY failed ($DNAfile)\n";
}

push(@files2remove,$DNA_phylip_file);

my $DNA_nexus_file = convert_FAS2NXS($DNAfile,$REMOVETMPFILES);
if($DNA_nexus_file eq $ERROR)
{
	unlink(@files2remove);
	die "# $progname : sorry, FAS2NXS failed ($DNAfile)\n";
}

push(@files2remove,$DNA_nexus_file);

my ($MODELTEST_bestAICmodel,$MODELTEST_file);
unless($skip_ModelTest)
{
	# 2) run MODELTEST3.7 using the PAUP output of -lnL scores generated by running MODELBLOCK3
	($MODELTEST_bestAICmodel,$MODELTEST_file) = run_MODELTEST($DNA_nexus_file,$REMOVETMPFILES);
	if($MODELTEST_bestAICmodel eq $ERROR)
	{
		unlink(@files2remove);
		die "# $progname : sorry, run_MODELTEST failed ($DNAfile)\n";
	}
	#system("rm modelfit.log model.scores"); # cleanup
}
else
{
	# 2.1) use model provided by user
	$MODELTEST_bestAICmodel = $skip_ModelTest;
	$MODELTEST_file = '-';
}

# 3) select PHYML parameters for this model
my $PHYMLparams = getPHYMLparameters($MODELTEST_bestAICmodel);
if($PHYMLparams eq $ERROR)
{
	unlink(@files2remove);
	die "# $progname : sorry, getPHYMLparameters failed with model $MODELTEST_bestAICmodel ($DNAfile)\n";
}

print $PHYMLparams;

# 4) run PHYML with this parameters
my ($PHYML_tree,$PHYML_lk,$PHYML_stat,$mean_aLRT,$median_aLRT) = run_PHYML($DNA_phylip_file,$PHYMLparams,$REMOVETMPFILES);
if($PHYML_tree eq $ERROR)
{
	unlink(@files2remove);
	die "# $progname : sorry, runPHYML failed ($DNAfile)\n";
}
elsif($label_tree)
{
	my ($newick,$labelled_newick) = ('','');

        open(TREE,$PHYML_tree) || die "# $0 : cannot read $PHYML_tree\n";
        while(<TREE>){ $newick .= $_; }
        close(TREE);

        if($newick)
        {
		my %ampFASTA = read_FASTA_sequence($DNAfile);	
		$labelled_newick = add_labels2newick_tree( $newick, \%ampFASTA );
		open(LABELTREE,">$PHYML_tree") || die "#$0 : cannot rewrite $PHYML_tree\n";
		print LABELTREE $labelled_newick;
		close(LABELTREE); #print "#$newick#$labelled_newick#\n";
	}
	else{ print "# $0 : cannot label tree $PHYML_tree\n"; }
}

push(@files2remove,$PHYML_tree,$PHYML_lk,$PHYML_stat);

# 5) parse PHYML stats in order to create params file to run PUZZLETREE
my $PUZZLE_param_file = get_PUZZLE_param_from_PHYML_stat($PHYML_stat);
if($PUZZLE_param_file eq $ERROR)
{
	unlink(@files2remove);
	die "# $progname : sorry, get_PUZZLE_param_from_PHYML_stat failed ($DNAfile)\n";
}

push(@files2remove,$PUZZLE_param_file);

# 6) run PUZZLE TREE for Likelihood Mapping (LM) with ML-param-file returned from get_PUZZLE_param_from_PHYML_stat()
my ($PUZZLE_dist,$PUZZLE_LM_puzzle,$alpha,$aln_stats,$distance_stats) = run_PUZZLE_LM($DNA_phylip_file,$PUZZLE_param_file, $REMOVETMPFILES);
if($PUZZLE_LM_puzzle eq $ERROR)
{
	unlink(@files2remove);
	die "# $progname : sorry, runPUZZLE_LM failed ($DNAfile)\n";
}

push(@files2remove,$PUZZLE_dist,$PUZZLE_LM_puzzle);

# 7) parse LM_PUZZLE file and print the corresponding MySQL.input table
my $DB_row = parse_LM_PUZZLE_file($PUZZLE_LM_puzzle);
if($DB_row eq $ERROR)
{
	unlink(@files2remove);
	die "# $progname : sorry, parse_LM_PUZZLE_file failed ($DNAfile)\n";
}

print "# output : subs_model = $MODELTEST_bestAICmodel stats = $DB_row\n";
print "# alpha = $alpha alignment stats : $aln_stats\n";
print "# distance stats : $distance_stats\n";
print "# mean aLRT = $mean_aLRT median aLRT = $median_aLRT\n";
print "# outfiles : $DNA_phylip_file $PHYML_tree $PUZZLE_param_file $MODELTEST_file $PUZZLE_dist $PUZZLE_LM_puzzle $PHYML_stat $DNAfile\n";

if($REMOVETMPFILES)
{
	unlink($PHYML_lk,$DNA_nexus_file);
}
